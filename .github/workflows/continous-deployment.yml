name: Continuous Deployment

on:
  push:
    branches:
      - main
    tags:
      - v*
  pull_request:
    branches:
      - main

jobs:
  docker-image:
    runs-on: ubuntu-latest
    steps:
      # QEMU and Docker Buildx are required for cross-platform builds.
      # ?(busser): Do we actually need QEMU and Buildx here?
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      # Images are pulled from and pushed to the GitHub Container Registry.
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Depending on whether a pull request triggered the workflow, the commit
      # hash we want to use is different.
      - name: Get version from main branch
        if: ${{ github.event_name == 'push' }}
        run: |
          echo "VERSION=${{ github.sha }}" >> $GITHUB_ENV
      - name: Get version from pull request
        if: ${{ github.event_name == 'pull_request' }}
        run: |
          echo "VERSION=${{ github.event.pull_request.head.sha }}" >> $GITHUB_ENV
      # We use the repository's name as the image's name.
      - name: Build and push Docker image
        id: docker_build
        uses: docker/build-push-action@v2
        with:
          push: true # <== Only difference with same job in continuous integration workflow
          tags: |
            ghcr.io/${{ github.repository }}:latest
            ghcr.io/${{ github.repository }}:${{ env.VERSION }}
          cache-from: type=gha,src=/tmp/.buildx-cache
          cache-to: type=gha,mode=max

  # Publish a new production release if this pipeline was triggered by a tag.
  github-release:
    runs-on: ubuntu-latest
    needs: docker-image
    if: ${{ startsWith(github.ref, 'refs/tags/') }}
    steps:
      - name: Production release
        uses: 'marvinpinto/action-automatic-releases@v1.2.1'
        with:
          prerelease: false
          repo_token: '${{ secrets.GITHUB_TOKEN }}'

  commit-version-to-kubernetes-repo:
    runs-on: ubuntu-latest
    needs: docker-image
    if: ${{ github.event_name == 'push' }}
    steps:
      # Configure SSH agent with private key.
      # The public key is configured as a deploy key for the afev-org/kubernetes repo.
      - name: 'Configure SSH agent'
        uses: webfactory/ssh-agent@v0.5.3
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY_DEPLOYMENT }}

      # Clone the afev-org/kubernetes repository.
      - name: 'Checkout the kubernetes repository'
        uses: actions/checkout@v2
        with:
          repository: afev-org/kubernetes
          path: ./kubernetes
          ssh-key: not-a-real-key # This action ignores the SSH agent if this field is not set.

      # Define settings depending on target environment.
      - name: 'Configure for pre-production environment'
        if: ${{ github.ref == 'refs/heads/main' }}
        run: |
          echo "ENVIRONMENT_NAME=preproduction" >> $GITHUB_ENV
      - name: 'Configure for production environment'
        if: ${{ startsWith(github.ref, 'refs/tags/') }}
        run: |
          echo "ENVIRONMENT_NAME=production" >> $GITHUB_ENV
      # Write the release's commit hash to the corresponding

      # Kubernetes configuration file.
      - name: "Update version in manifests"
        uses: microsoft/variable-substitution@v1
        with:
          files: ./kubernetes/charts/myddleware/values.${{ env.ENVIRONMENT_NAME }}.yaml
        env:
          version: ${{ github.sha }}

      # Push changes to the kubernetes repository.
      - name: 'Commit and push'
        uses: stefanzweifel/git-auto-commit-action@v4
        with:
          commit_message: 'chore(${{ env.ENVIRONMENT_NAME }}/myddleware): update version'
          repository: ./kubernetes
