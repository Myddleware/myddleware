{#/*********************************************************************************
* This file is part of Myddleware.

* @package Myddleware
* @copyright Copyright (C) 2013 - 2015  Stéphane Faure - CRMconsult EURL
* @copyright Copyright (C) 2015 - 2016  Stéphane Faure - Myddleware ltd - contact@myddleware.com
* @link http://www.myddleware.com

This file is part of Myddleware.

Myddleware is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

Myddleware is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with Myddleware.  If not, see <http://www.gnu.org/licenses/>.
*********************************************************************************/ #} 

{% extends 'base.html.twig' %}
{% block stylesheets %}
    {{ parent() }}
    <link rel="stylesheet" href="{{ asset('assets/css/account-card.css') }}">
{% endblock %}

{% block titlesm %}{{ 'title.account.view'|trans }}{% endblock titlesm %}

{% block body %}
<div id="account-container">
    <div class="account-card">
        <h1 class="text-center mb-4">{{ 'view_account.user_info'|trans }}</h1>
        
        {% for label, messages in app.flashes %}
            {% for message in messages %}
                <div class="alert alert-{{ label == 'error' ? 'danger' : label }} d-flex justify-content-start align-content-start" role="alert">
                    <i class="fas fa-{{ label == 'error' ? 'times' : 'check' }}"></i>
                    <p class="ms-2">{{ message }}</p>
                </div>
            {% endfor %}
        {% endfor %}
        
        <!-- Tab Navigation -->
        <div class="tab-group">
            <button class="tab active" data-tab="general">General</button>
            <button class="tab" data-tab="security">Security</button>
        </div>
        
        <!-- General Tab -->
        <div id="general-tab" class="tab-content active">
            <!-- Language Selection -->
            <h3>{{ 'view_account.label.language'|trans }}</h3>
            <div class="form-group">
                <div class="btn-group" role="group" aria-label="...">
                    <button class="btn btn-light">
                        <a href="#" data-locale="{{ locales|languages['default'] }}" class="text-decoration-none">
                            {{ locales|languages['default']|trans }}
                        </a>
                    </button>
                    {% for locale in locales|languages['other'] %}
                    <button class="btn btn-primary">
                        <a href="{{ path('account_locale', {'locale': locale}) }}" data-locale="{{ locale }}" style="color: #fff;" class="text-decoration-none">
                            {{ locale|trans }}
                        </a>
                    </button>
                    {% endfor %}
                </div>
            </div>
            
            <!-- Profile Edit -->
            <h3>{{ 'view_account.profile_edit'|trans }}</h3>
            {{ form_start(form) }}
            <div class="form-group">
                <label for="username">{{ form_label(form.username) }}</label>
                {{ form_widget(form.username, { 'attr': {'class': 'form-control'} }) }}
                {{ form_errors(form.username) }}
            </div>
            <div class="form-group">
                <label for="email">{{ form_label(form.email) }}</label>
                {{ form_widget(form.email, { 'attr': {'class': 'form-control'} }) }}
                {{ form_errors(form.email) }}
            </div>
            <div class="form-group">
                <label for="timezone">Time zone</label>
                {{ form_widget(form.timezone, { 'attr': {'class': 'form-control'} }) }}
                {{ form_errors(form.timezone) }}
            </div>
            <button type="submit" id="save-account-details" class="btn btn-success mt-2">{{ 'view_connector.btn.save'|trans }}</button>
            {{ form_end(form) }}
            
            <!-- Password Reset -->
            <h3>{{'password_reset.title'|trans}}</h3>
            <div class="form-group">
                <a href="{{ path('my_account_reset_password')}}">
                    <button type="button" class="btn btn-primary">{{'password_reset.button'|trans}}</button>
                </a>
            </div>
            
            <!-- Log Management -->
            <h3>Logs</h3>
            <div class="form-group">
                <label>Download the latest logs</label>
                <div>
                    <a href="{{path('download_log')}}">
                        <button type="button" class="btn-log btn-download">Download</button>
                    </a>
                </div>
            </div>
            
            {% if is_granted('ROLE_SUPER_ADMIN') %}
            <div class="form-group">
                <label>Empty the log file</label>
                <div>
                    <a href="{{path('empty_log')}}">
                        <button type="button" class="btn-log btn-delete">Empty</button>
                    </a>
                </div>
            </div>
            {% endif %}
        </div>
        
        <!-- Security Tab -->
        <div id="security-tab" class="tab-content" style="display: none;">
            <h3>Two-Factor Authentication</h3>
            {{ form_start(twoFactorAuthForm) }}
            <div class="form-group toggle-switch-container">
                <label>Active</label>
                <div class="toggle-switch small">
                    {% if not smtpConfigured %}
                        {{ form_widget(twoFactorAuthForm.enabled, { 'attr': {'disabled': 'disabled'} }) }}
                        <span class="toggle-slider"></span>
                        <div class="alert alert-danger mt-2">
                            <i class="fas fa-exclamation-triangle"></i>
                            <span class="ms-2">Two-factor authentication requires email configuration. Please configure either SMTP settings or Sendinblue API key in the <a href="{{ path('management_smtp_index') }}">SMTP Management</a> page.</span>
                        </div>
                    {% else %}
                        {{ form_widget(twoFactorAuthForm.enabled) }}
                        <span class="toggle-slider"></span>
                    {% endif %}
                </div>
            </div>
            
            <small class="helper-text">
                When enabled, you'll be asked to enter a verification code sent to your email after logging in.
            </small>
            
            {# Hide the preferredMethod field since we're only using email #}
            <div style="display: none;">
                {{ form_widget(twoFactorAuthForm.preferredMethod) }}
            </div>
            
            <button type="submit" class="btn btn-success mt-3">Save 2FA Settings</button>
            {{ form_end(twoFactorAuthForm) }}

            <h3>Change Password</h3>
            <form id="password-form" class="account-form">
                <div class="form-group">
                    <label for="current-password">Current Password</label>
                    <input type="password" id="current-password" name="oldPassword" class="form-control" />
                </div>
                
                <div class="form-group">
                    <label for="new-password">New Password</label>
                    <input type="password" id="new-password" name="plainPassword" class="form-control" />
                    <div id="password-strength-meter-reduce-width" class="password-strength-meter">
                        <div id="password-strength-bar"></div>
                    </div>
                </div>
                
                <div class="form-group">
                    <label for="confirm-password">Confirm New Password</label>
                    <input type="password" id="confirm-password" name="confirmPassword" class="form-control" />
                </div>
                
                <button type="submit" class="btn btn-primary mt-2">Change Password</button>
            </form>
        </div>
    </div>
</div>

<script>
    document.addEventListener('DOMContentLoaded', function() {
        // Tab switching functionality
        const tabs = document.querySelectorAll('.tab');
        const tabContents = document.querySelectorAll('.tab-content');
        
        tabs.forEach(tab => {
            tab.addEventListener('click', function() {
                // Remove active class from all tabs and hide all content
                tabs.forEach(t => t.classList.remove('active'));
                tabContents.forEach(content => {
                    content.style.display = 'none';
                });
                
                // Add active class to clicked tab and show its content
                this.classList.add('active');
                const tabId = this.getAttribute('data-tab');
                document.getElementById(tabId + '-tab').style.display = 'block';
            });
        });
    });
    
    // Password form submission
    const passwordForm = document.getElementById('password-form');
    if (passwordForm) {
        passwordForm.addEventListener('submit', function(e) {
            e.preventDefault();
            
            const currentPassword = document.getElementById('current-password').value;
            const newPassword = document.getElementById('new-password').value;
            const confirmPassword = document.getElementById('confirm-password').value;
            
            // Validate passwords
            if (newPassword !== confirmPassword) {
                alert('New password and confirmation do not match');
                return;
            }
            
            // Prepare form data
            const formData = new FormData();
            formData.append('oldPassword', currentPassword);
            formData.append('plainPassword', newPassword);
            
            // Send request
            fetch('/rule/api/account/password/update', {
                method: 'POST',
                body: formData,
                headers: {
                    'X-Requested-With': 'XMLHttpRequest'
                }
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    alert('Password updated successfully');
                    passwordForm.reset();
                } else {
                    alert(data.message || 'Failed to update password');
                }
            })
            .catch(error => {
                console.error('Error:', error);
                alert('An error occurred while updating password');
            });
        });
    }
    
    // Password strength meter functionality
    const passwordInput = document.getElementById('new-password');
    const strengthBar = document.getElementById('password-strength-bar');
    
    if (passwordInput && strengthBar) {
        passwordInput.addEventListener('input', function() {
            const password = this.value;
            let strength = 0;
            
            // Length
            strength += Math.min(password.length * 4, 40);
            
            // Character variety
            const hasLower = /[a-z]/.test(password);
            const hasUpper = /[A-Z]/.test(password);
            const hasDigit = /\d/.test(password);
            const hasSpecial = /[^a-zA-Z0-9]/.test(password);
            
            const variety = (hasLower ? 1 : 0) + 
                           (hasUpper ? 1 : 0) + 
                           (hasDigit ? 1 : 0) + 
                           (hasSpecial ? 1 : 0);
            
            strength += variety * 10;
            
            // Special bonuses
            if (password.length > 8 && variety >= 3) {
                strength += 10;
            }
            
            if (password.length > 12 && variety >= 4) {
                strength += 10;
            }
            
            strength = Math.min(strength, 100);
            
            // Update the UI
            strengthBar.className = '';
            strengthBar.style.width = strength + '%';
            
            if (password.length > 0) {
                if (strength < 30) {
                    strengthBar.classList.add('strength-weak');
                } else if (strength < 60) {
                    strengthBar.classList.add('strength-medium');
                } else {
                    strengthBar.classList.add('strength-strong');
                }
            }
        });
    }
</script>
{% endblock %}