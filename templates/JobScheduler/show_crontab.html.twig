{% extends 'base.html.twig' %}
{% block titlesm %}
	{{ 'crontab.title'|trans }}
{% endblock %}
{% block body %}
	<div class="p-5">
		<div id="info" class='container'>
			<div id="jobsceduler_table">
				<table class="table table-light table-hover">
					<tbody>
						<tr>
							<td class="title">
								<label>Id</label>
							</td>
							<td class="value">{{ entity.id }}</td>
						</tr>
						<tr>
							<td class="title">
								<label>{{ 'jobscheduler.date_created'|trans }}</label>
							</td>
							<td class="value">{{ entity.createdAt|date('Y-m-d H:i:s') }}</td>
						</tr>
						<tr>
							<td class="title">
								<label>{{ 'jobscheduler.date_modified'|trans }}</label>
							</td>
							<td class="value">{{ entity.updatedAt|date('d/m/Y') }}</td>
						</tr>
						<tr>
							<td class="title">
								<label>{{ 'crontab.command'|trans }}</label>
							</td>
							<td class="value">{{ entity.command }}</td>
						</tr>
						<tr>
							<td class="title">
								<label>{{ 'crontab.arguments'|trans }}</label>
							</td>
							<td class="value">{{ entity.arguments }}</td>
						</tr>
						<tr>
							<td class="title">
								<label>{{ 'crontab.description'|trans }}</label>
							</td>
							<td class="value">{{ entity.description }}</td>
						</tr>
						<tr>
							<td class="title">
								<label>{{ 'crontab.running'|trans }}</label>
							</td>>
							<td class="value">{{ entity.runningInstances }}</td>
						</tr>
						<tr>
							<td class="title">
								<label>{{ 'crontab.max_instance'|trans }}</label>
							</td>
							<td class="value">{{ entity.maxInstances }}</td>
						</tr>
						<tr>
							<td class="title">
								<label>{{ 'crontab.number'|trans }}</label>
							</td>
							<td class="value">{{ entity.number }}</td>
						</tr>
						<tr>
							<td class="title">
								<label>{{ 'jobscheduler.active'|trans }}</label>
							</td>
							<td class="value">
								{% if entity.enable %}
									true
								{% else %}
									false
								{% endif %}
							</td>
						</tr>
					</tbody>
				</table>
			</div>
			<div id="jobschedulerresulttable">
				<table class="table table-light table-hover" id="myTable">
                
                <h4 class="mt-5">{{ 'Crontab Results'|trans }}</h4>
                <h5 class="mt-5" id="crontab-order-info">{{ "Sorting: Default" }}</h5>

                
					<thead>
						<tr>
                            <th onclick="sortTable(0)" >{{ 'jobscheduler.id'|trans }}</th>
							<th onclick="sortTable(1)" >{{ 'jobscheduler.date_created'|trans }}</th>
							<th onclick="sortTable(2)" >{{ 'jobscheduler.date_modified'|trans }}</th>
							<th onclick="sortTable(3)" >{{ 'jobscheduler.output'|trans }}</th>
						</tr>
					</thead>
					<tbody>
						{% for result in entityResult %}
							<tr>
                                <td>{{ result.id }}</td>
								<td>{{ result.createdAt|date('Y-m-d H:i:s') }}</td>
								<td>{{ result.updatedAt|date('Y-m-d H:i:s') }}</td>
								<td>{{ result.output|raw }}</td>
							</tr>
						{% endfor %}
					</tbody>
				</table>
			</div>

		</div>

        

<script>
function sortTable(n) {
  var table, rows, switching, i, x, y, shouldSwitch, dir, switchcount = 0;
  table = document.getElementById("myTable");
  switching = true;
  dir = "asc"; 

  // Update the h5 content to show the current sorting direction
  var orderInfo = document.getElementById("crontab-order-info");
  orderInfo.innerText = "Sorting: " + (dir === "asc" ? "Ascending" : "Descending");

  while (switching) {
    switching = false;
    rows = table.rows;

    for (i = 1; i < (rows.length - 1); i++) {
      shouldSwitch = false;
      x = rows[i].getElementsByTagName("TD")[n];
      y = rows[i + 1].getElementsByTagName("TD")[n];

      // Check if we are dealing with dates
      if (n === 1 || n === 2) { // assuming date columns are 1 (Date created) and 2 (Date update)
        var xDate = new Date(x.innerHTML);
        var yDate = new Date(y.innerHTML);
      } else {
        var xContent = isNaN(parseInt(x.innerHTML)) ? x.innerHTML.toLowerCase() : parseInt(x.innerHTML);
        var yContent = isNaN(parseInt(y.innerHTML)) ? y.innerHTML.toLowerCase() : parseInt(y.innerHTML);
      }

      if (n === 1 || n === 2) { // date columns
        if (dir == "asc") {
          if (xDate > yDate) {
            shouldSwitch = true;
            break;
          }
        } else if (dir == "desc") {
          if (xDate < yDate) {
            shouldSwitch = true;
            break;
          }
        }
      } else { // other columns
        if (dir == "asc") {
          if (xContent > yContent) {
            shouldSwitch = true;
            break;
          }
        } else if (dir == "desc") {
          if (xContent < yContent) {
            shouldSwitch = true;
            break;
          }
        }
      }
    }

    if (shouldSwitch) {
      rows[i].parentNode.insertBefore(rows[i + 1], rows[i]);
      switching = true;
      switchcount++;      
    } else {
      if (switchcount == 0 && dir == "asc") {
        dir = "desc";
        switching = true;
        // Update the h5 content when the direction changes
        orderInfo.innerText = "Sorting: Descending";
      }
    }
  }

  // Final update in case no switching was done and the direction is already descending
  if (!switching && dir === "desc") {
    orderInfo.innerText = "Sorting: Descending";
  }
}



</script>
	{% endblock %}
