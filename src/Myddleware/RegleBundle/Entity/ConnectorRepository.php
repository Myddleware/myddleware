<?php
/*********************************************************************************
 * This file is part of Myddleware.

 * @package Myddleware
 * @copyright Copyright (C) 2013 - 2015  Stéphane Faure - CRMconsult EURL
 * @copyright Copyright (C) 2015 - 2016  Stéphane Faure - Myddleware ltd - contact@myddleware.com
 * @link http://www.myddleware.com	
 
 This file is part of Myddleware.
 
 Myddleware is free software: you can redistribute it and/or modify
 it under the terms of the GNU General Public License as published by
 the Free Software Foundation, either version 3 of the License, or
 (at your option) any later version.

 Myddleware is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 GNU General Public License for more details.

 You should have received a copy of the GNU General Public License
 along with Myddleware.  If not, see <http://www.gnu.org/licenses/>.
*********************************************************************************/

namespace Myddleware\RegleBundle\Entity;

use Doctrine\ORM\EntityRepository;

/**
 * SolutionRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ConnectorRepository extends EntityRepository
{	
	// Liste des connecteurs pour un user et si les solutions sont actives
	public function findAllConnectorByUser($id,$type)
	{
	  	
	  $qb = $this->createQueryBuilder('c');	
	  $qb->select('c.id as id_connector, c.label,s.name')
	  	 ->leftJoin('c.solution', 's')
	     ->where('c.createdBy = :user_id AND s.active = 1 AND s.'.$type.' = 1 ');
	     // ->setParameter('user_id', $id);

	    return $qb->getQuery()
	              ->getResult();
	}

	// Affiche la liste des connecteurs d'un user ou tout en fonction si c'est le support
	public function findListConnectorByUser($is_support,$id) {
	
		 $qb = $this->createQueryBuilder('c');	
		 		 
		 $qb->innerJoin('c.solution', 'sol')	
			->addSelect('sol.name solution');
					
		if($is_support === false) {
			$qb->where('c.createdBy = :user_id')
			   ->setParameter('user_id', $id);
		}
				
		$qb->orderBy('c.id', 'DESC');
		

	    return $qb->getQuery();		
	
	}				
}
