<?php
/*********************************************************************************
 * This file is part of Myddleware.

 * @package Myddleware
 * @copyright Copyright (C) 2013 - 2015  Stéphane Faure - CRMconsult EURL
 * @copyright Copyright (C) 2015 - 2016  Stéphane Faure - Myddleware ltd - contact@myddleware.com
 * @link http://www.myddleware.com	
 
 This file is part of Myddleware.
 
 Myddleware is free software: you can redistribute it and/or modify
 it under the terms of the GNU General Public License as published by
 the Free Software Foundation, either version 3 of the License, or
 (at your option) any later version.

 Myddleware is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 GNU General Public License for more details.

 You should have received a copy of the GNU General Public License
 along with Myddleware.  If not, see <http://www.gnu.org/licenses/>.
*********************************************************************************/

namespace Myddleware\RegleBundle\Entity;

use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\Query\ResultSetMapping;


/**
 * ConnectorParamRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class RuleRepository extends EntityRepository
{
	// Retourne le nombre de règle pour un user
	public function findCountAllRuleByUser($id)
	{
		return $this->createQueryBuilder('r')
					->select('COUNT(r)')
					->where('r.createdBy = :user_id')
				    ->setParameter('user_id', $id)
					->getQuery()
					->getSingleScalarResult();		
	}
	
	// Retourne toutes les règles d'un user
	public function findListRuleByUser($is_support,$id){
		
		$sql = $this->createQueryBuilder('r')
					->innerJoin('r.connectorSource', 'cs')
					->innerJoin('r.connectorTarget', 'ct')
					->innerJoin('cs.solution', 'Solution_source')
					->innerJoin('ct.solution', 'Solution_target')	
					->addSelect('r.id')	
					->addSelect('r.dateCreated')
					->addSelect('r.name')
					->addSelect('r.active')
					->addSelect('r.nameSlug')	
					->addSelect('r.createdBy')						
					->addSelect('cs.name lbl_source')
					->addSelect('ct.name lbl_target')
					->addSelect('Solution_source.name solution_source')
					->addSelect('Solution_target.name solution_target')					
					// ->addOrderBy('r.active', 'DESC')
					// ->addOrderBy('cs.name', 'DESC')
					// ->addOrderBy('ct.name', 'DESC')
					// ->addOrderBy('r.name', 'ASC')
					;
							
		// si ce n'est pas le support alors on affecte l'id client sinon on affiche tout			
		if($is_support == false) {
			$sql->where('r.createdBy = :user_id AND r.deleted = 0')
				 ->setParameter('user_id', $id);
		}
		else {
			$sql->where('r.deleted = 0');
		}

		return $sql->getQuery();	
					
	}

	// Infos connecteurs et solution d'une règle
	public function infosConnectorByRule($id){ 

		return $this->createQueryBuilder('r')
					->innerJoin('r.connectorSource', 'cs')
					->innerJoin('r.connectorTarget', 'ct')
					->innerJoin('cs.solution', 'Solution_source')
					->innerJoin('ct.solution', 'Solution_target')				
					->addSelect('cs.name lbl_source')
					->addSelect('ct.name lbl_target')
					->addSelect('cs.id id_source')
					->addSelect('ct.id id_target')					
					->addSelect('Solution_source.name solution_source')
					->addSelect('Solution_target.name solution_target')					
					->where('r.id = :rule_id')
				    ->setParameter('rule_id', $id)
					->getQuery()
					->getResult();		
	}
	
}
