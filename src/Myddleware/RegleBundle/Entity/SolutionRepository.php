<?php
/*********************************************************************************
 * This file is part of Myddleware.

 * @package Myddleware
 * @copyright Copyright (C) 2013 - 2015  Stéphane Faure - CRMconsult EURL
 * @copyright Copyright (C) 2015 - 2016  Stéphane Faure - Myddleware ltd - contact@myddleware.com
 * @link http://www.myddleware.com	
 
 This file is part of Myddleware.
 
 Myddleware is free software: you can redistribute it and/or modify
 it under the terms of the GNU General Public License as published by
 the Free Software Foundation, either version 3 of the License, or
 (at your option) any later version.

 Myddleware is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 GNU General Public License for more details.

 You should have received a copy of the GNU General Public License
 along with Myddleware.  If not, see <http://www.gnu.org/licenses/>.
*********************************************************************************/

namespace Myddleware\RegleBundle\Entity;

use Doctrine\ORM\EntityRepository;

/**
 * SolutionRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class SolutionRepository extends EntityRepository
{

	// Liste des solutions actives
	public function solutionActive()
	{
	  $qb = $this->_em->createQueryBuilder();
	  
	  $qb->select('s')
	     ->from('RegleBundle:Solution', 's')
	     ->where('s.active = :active')
	     ->setParameter('active', 1);
	 
	    return $qb->getQuery()
	              ->getResult();
				  
				  // getArrayResult()
				  // getScalarResult()
				  // getOneOrNullResult()
				  // getSingleResult()
				  // getSingleScalarResult()
				  // execute()
				  
	}


	// Liste des solutions en fonction des connecteurs
	public function solutionConnector($type,$is_support,$id)
	{
	  $qb = $this->_em->createQueryBuilder();
	  
	  $field = (($type == 'target') ? 'target' : 'source');
	  
	  $qb->select('s','c')
	     ->from('RegleBundle:Solution', 's')
		 ->innerJoin('s.connector', 'c');

		// si ce n'est pas le support alors on affecte l'id client sinon on affiche tout
		// On affiche uniquement les connecteurs du user			
		if($is_support === false) {
			$qb->where('s.active = :active AND s.'.$field.' = :type AND c.createdBy = :user_id')
			   ->setParameter('active', 1)
		 	   ->setParameter('type', 1)
			   ->setParameter('user_id', $id);
		}
		else {
			$qb->where('s.active = :active AND s.'.$field.' = :type')
			   ->setParameter('active', 1)
		 	   ->setParameter('type', 1);
		}		 
		 

		$qb ->groupBy('s.name')
		    ->orderBy('s.name', 'ASC');
		 
	    return $qb->getQuery()
	              ->getResult();	
				  			  	  
	}


	// Liste des solutions en fonction des types
	public function solutionConnectorType($type)
	{
	  $qb = $this->_em->createQueryBuilder();
	  
	  $field = (($type == 'target') ? 'target' : 'source');
	  
	  $qb->select('s')
	     ->from('RegleBundle:Solution', 's')
	     ->where('s.active = :active AND s.'.$field.' = :type')
	     ->setParameter('active', 1)
		 ->setParameter('type', 1)
		 ->groupBy('s.name')
		 ->orderBy('s.name', 'ASC');
	    return $qb->getQuery()
	              ->getResult();		  
	}

			
}
